shiny::runApp()
devtools::install_github("kasaha1/classpredict")
# install Kang's basic functions package from the git-hub
if ("devtools" %in% installed.packages()[, "Package"]){cat("devtools is installed")}else(install.packages("devtools"))
devtools::install_github("kasaha1/kasaBasicFunctions")
devtools::install_github("kasaha1/classpredict")
# install Kang's basic functions package from the git-hub
library(kasaBasicFunctions)
library(classpredict)
#------------- Packages ----
packages <- c("tidyverse", "data.table","shiny","shinycssloaders","zip","shinythemes")
kasa.instPak (packages)
#-----------------------------
#------------- Bioc_Packages ----
packages_bioc <- c("impute","ROC")
kasa.instPak_bioc (packages_bioc)
#-----------------------------
options(shiny.maxRequestSize=600*1024^2)
ui <- fluidPage(theme = shinytheme("journal"),
# Application title
# tags$img(src="PICSicon.jpg",width = 100,height = 50),
titlePanel("Bayesian Compound Covariate Prediction (BCCP)"),
# titlePanel( div(column(width = 3, tags$img(src = "PICSicon.jpg",width = 80,height = 40)),column(width = 8, h3("PICS100 prediction by Ju-Seog's Lab"))),windowTitle="PICS100" ),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$img(
src = "icon.png",
width = 220,
height = 100
),
br(),
br(),
fileInput(
'TrainingGeneExprfile',
h4('The mRNA expression file for training(txt/csv)'),
accept = c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
fileInput(
'ClassOfTraining',
h4('The file for class of the training(txt/csv)'),
accept = c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
fileInput(
'PredictedGeneExprfile',
h4('The mRNA expression file for prediction(txt/csv)'),
accept = c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
radioButtons(
'standardizationType',
'Standardization',
c(
'Non-standardization' = 'NoneS',
# 'Mendian-centering only' = 'medianCenter',
'Median-centering and dividing by SD' = 'devidedBySD',
'Robust Z score' = 'RobustZ',
'Z score'='Zscore'
)
),
actionButton(inputId = "doPrediction", label = "Prediction", class = "btn-primary"),
br(),
br(),
downloadButton('downloadResults', 'Download result table')
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel(
"How to use",
HTML(
"&nbsp; <p>Hi. This is the prediction tool for BCCP using mRNA expression data.</p><p>Just upload your dataset. And press the prediction button. That's all. You can download example dataset from"
),
tags$a(href = "exampleSet.zip", " here"),
HTML("or the below button."),
br(),
HTML("</p><p>&nbsp;</p><p><b>Step 1. Prepare of dataset.</b></p>"),
HTML("<b>Step 1.1 Training dataset (txt/csv file).</b>"),
img(
src = "1signature.png",
width = 400,
height = 150
),
br(),
HTML("</p><p>&nbsp;</p><p><b>Step 1.2 Class(group) of training dataset (txt/csv).</b></p>"),
img(
src = "2class.png",
width = 150,
height = 150
),
br(),
HTML("</p><p>&nbsp;</p><p><b>Step 1.3 Test(for prediction) dataset (txt/csv).</b></p>"),
img(
src = "3test.png",
width = 600,
height = 200
),
HTML(
"<p> &nbsp;</p><p> The first line contains the labels Name(<em>HUGO Gene Nomenclature</em>) followed by the identifiers for each sample in the dataset.The dataset is the gene-level transcription estimates, as in log2(x+1) transformed normalized count.&nbsp; </br>* The symbols of test dataset are automatically matched to training dataset symbols .&nbsp;</p><p>&nbsp;</p><p><b>Step 2. Standardization. </b> &nbsp;</p><p> Select the data standardization method. &nbsp;</p><p><b>Step 3. Prediction.</b> &nbsp;</p><p> Press the prediction button. &nbsp;</p><p><b>Step 4. Check out the results.</b> &nbsp;</p><p>After analysis, You can find the results at the result tab. The results of dataset could be downloaded using the download button.</p>"
)
)
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
trainingDataset_r <- reactive({
inFile <- input$TrainingGeneExprfile
req(inFile)
f <- fread(inFile$datapath) %>% as.data.frame()
colnames(f)[1] <- "gene"
return(f)
})
trainingClass_r <- reactive({
inFile <- input$ClassOfTraining
req(inFile)
f <- fread(inFile$datapath) %>% as.data.frame()
colnames(f) <- c("sample","class")
return(f)
})
predictDataset_r <- reactive({
inFile <- input$PredictedGeneExprfile
req(inFile)
f <- fread(inFile$datapath) %>% as.data.frame()
colnames(f)[1] <- "gene"
return(f)
})
DoPrediction <- observeEvent(input$doPrediction, {
# duplication removal
trainingDataset <-trainingDataset_r() %>% kasa.duplicationRemovalBySD()
colnames(trainingDataset)[1] <- "gene"
predictDataset <- predictDataset_r() %>% kasa.duplicationRemovalBySD()
colnames(predictDataset)[1] <- "gene"
# sample matching
tmp <- trainingDataset %>% kasa.transposeMatrix()
tmp.1 <- kasa.matchingRow(dataframeX = tmp,dataframeY = trainingClass_r(), keycolX = "sample",keycolY = "sample")
trainingDataset <- tmp.1$dataframeX %>% kasa.transposeMatrix()
colnames(trainingDataset)[1] <- "gene"
trainingClass <- tmp.1$dataframeY
colnames(trainingClass) <- c("sample","class")
## unmatched samples
matchedSamples <- trainingClass$sample %>% as.vector()
unmatchedSamples.t <- tmp$sample[!(tmp$sample %in% matchedSamples)]
unmatchedSamples.c <- trainingClass$sample[!(trainingClass$sample%in% matchedSamples)]
# gene matching
tmp <- kasa.matchingRow(dataframeX = trainingDataset,dataframeY = predictDataset,keycolX = "gene",keycolY = "gene")
trainingDataset <- tmp$dataframeX
predictDataset <- tmp$dataframeY
colnames(trainingDataset)[1] <- "gene"
colnames(predictDataset)[1] <- "gene"
## unmatched gene
matchedgene <- trainingDataset$gene %>% as.vector()
unmatchedGene.t <- trainingDataset_r()$gene[!(trainingDataset_r()$gene %in% matchedgene)]
unmatchedGene.p <- predictDataset_r()$gene[!(predictDataset_r()$gene %in% matchedgene)]
# Standardization by STD_method ---- "none", "STD", "Z_Score", "Robust_Z_score"
switch (
input$standardizationType,
devidedBySD = {
trainingDataset <-
trainingDataset %>% kasa.geneMedianCentering() %>% kasa.geneStandardization()
predictDataset <-
predictDataset %>% kasa.geneMedianCentering() %>% kasa.geneStandardization()
},
Zscore = {
trainingDataset <- trainingDataset %>% kasa.geneZscoring()
predictDataset <- predictDataset %>% kasa.geneZscoring()
},
RobustZ = {
trainingDataset <- trainingDataset %>% kasa.geneRobustZscoring()
predictDataset <- predictDataset %>% kasa.geneRobustZscoring()
}
)
# data preparing for class prediction ----
geneId_x_ <- trainingDataset$gene %>% as.data.frame()
colnames(geneId_x_) <- c("UniqueID")
x_x_ <- trainingDataset[-1]
filter_x_ <- rep(1,nrow(trainingDataset))
expdesign_x_ <- trainingClass
exprTrain_x_ <- x_x_
exprTest_x_ <- predictDataset[-1]
k <- count(expdesign_x_,class)
class_t.l1 <- k$n[1] %>% as.numeric()
class_t.l2 <- k$n[2] %>% as.numeric()
# projectPath <-"OutputBRBarray"
projectPath <- paste0(tempdir(),"/OutputBRBarray")
outputName <- "classPrediction"
generateHTML <- TRUE
prevalence <- c(class_t.l1/(class_t.l1+class_t.l2),class_t.l2/(class_t.l1+class_t.l2))
names(prevalence) <- c(k$class[1], k$class[2])
geneId_m <- geneId_x_[c("UniqueID")]
cls_t <- expdesign_x_$class %>% as.vector()
resList <- classPredict(exprTrain = exprTrain_x_, exprTest = exprTest_x_, isPaired = FALSE,
pairVar.train = NULL, pairVar.test = NULL, geneId_m,
cls = cls_t,
pmethod = c("ccp", "bcc", "dlda", "knn", "nc", "svm"),
geneSelect = "igenes.univAlpha",
univAlpha = 0.001, univMcr = 0, foldDiff = 0, rvm = TRUE, filter = filter_x_,
ngenePairs = 25, nfrvm = 10, cvMethod = 1, kfoldValue = 10, bccPrior = 1,
bccThresh = 0.8, nperm = 0, svmCost = 1, svmWeight =1, fixseed = 1,
prevalence = prevalence, projectPath = projectPath,
outputName = outputName, generateHTML = generateHTML)
if (generateHTML)
browseURL(file.path(projectPath, "Output", outputName,
paste0(outputName, ".html")))
print(projectPath)
output$downloadResults <- downloadHandler(
filename = 'AllReports.zip',
content = function(fname) {
setwd(projectPath)
print(projectPath)
fs <- c("unmatchedSamples_training.txt", "unmatchedSamples_class.txt", "unmatchedGene_training.txt","unmatchedGene_prediction.txt","1_trainingDataset.txt","2_trainingClass.txt","3_predictDataset.txt","4_PredictionResults.txt","5_probability_BCCP.txt")
write.table(unmatchedSamples.t,file = "unmatchedSamples_training.txt",quote=F,row.names = F)
write.table(unmatchedSamples.c,file = "unmatchedSamples_class.txt",quote=F,row.names = F)
write.table(unmatchedGene.t,file = "unmatchedGene_training.txt",quote=F,row.names = F)
write.table(unmatchedGene.p,file = "unmatchedGene_prediction.txt",quote=F,row.names = F)
write_delim(x = trainingDataset,file = "1_trainingDataset.txt",delim = "\t")
write_delim(x = predictDataset,file = "3_predictDataset.txt",delim = "\t")
write_delim(x = trainingClass,file = "2_trainingClass.txt",delim = "\t")
write_delim(x=resList$predNewSamples,file = "4_PredictionResults.txt",delim = "\t")
write_delim(x=resList$probNew,file = "5_probability_BCCP.txt",delim = "\t")
zip(zipfile=fname, files=fs)
if(file.exists(paste0(fname, ".zip"))) {file.rename(paste0(fname, ".zip"), fname)}
},
contentType = "application/zip"
)
output$downloadExample <- downloadHandler(
filename = function() {
"exampleSet.zip"
},
content = function(file) {
file.copy("exampleSet.zip", file)
},
contentType = "application/zip"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# install Kang's basic functions package from the git-hub
if ("devtools" %in% installed.packages()[, "Package"]){cat("devtools is installed")}else(install.packages("devtools"))
devtools::install_github("kasaha1/kasaBasicFunctions")
devtools::install_github("kasaha1/classpredict")
# install Kang's basic functions package from the git-hub
library(kasaBasicFunctions)
library(classpredict)
#------------- Packages ----
packages <- c("tidyverse", "data.table","shiny","shinycssloaders","zip","shinythemes")
kasa.instPak (packages)
#-----------------------------
#------------- Bioc_Packages ----
packages_bioc <- c("impute","ROC")
kasa.instPak_bioc (packages_bioc)
#-----------------------------
options(shiny.maxRequestSize=600*1024^2)
ui <- fluidPage(theme = shinytheme("journal"),
# Application title
# tags$img(src="PICSicon.jpg",width = 100,height = 50),
titlePanel("Bayesian Compound Covariate Prediction (BCCP)"),
# titlePanel( div(column(width = 3, tags$img(src = "PICSicon.jpg",width = 80,height = 40)),column(width = 8, h3("PICS100 prediction by Ju-Seog's Lab"))),windowTitle="PICS100" ),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
tags$img(
src = "icon.png",
width = 220,
height = 100
),
br(),
br(),
fileInput(
'TrainingGeneExprfile',
h4('The mRNA expression file for training(txt/csv)'),
accept = c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
fileInput(
'ClassOfTraining',
h4('The file for class of the training(txt/csv)'),
accept = c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
fileInput(
'PredictedGeneExprfile',
h4('The mRNA expression file for prediction(txt/csv)'),
accept = c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')
),
radioButtons(
'standardizationType',
'Standardization',
c(
'Non-standardization' = 'NoneS',
# 'Mendian-centering only' = 'medianCenter',
'Median-centering and dividing by SD' = 'devidedBySD',
'Robust Z score' = 'RobustZ',
'Z score'='Zscore'
)
),
actionButton(inputId = "doPrediction", label = "Prediction", class = "btn-primary"),
br(),
br(),
downloadButton('downloadResults', 'Download result table')
),
# Show a plot of the generated distribution
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel(
"How to use",
HTML(
"&nbsp; <p>Hi. This is the prediction tool for BCCP using mRNA expression data.</p><p>Just upload your dataset. And press the prediction button. That's all. You can download example dataset from"
),
tags$a(href = "exampleSet.zip", " here"),
HTML("or the below button."),
br(),
HTML("</p><p>&nbsp;</p><p><b>Step 1. Prepare of dataset.</b></p>"),
HTML("<b>Step 1.1 Training dataset (txt/csv file).</b>"),
img(
src = "1signature.png",
width = 400,
height = 150
),
br(),
HTML("</p><p>&nbsp;</p><p><b>Step 1.2 Class(group) of training dataset (txt/csv).</b></p>"),
img(
src = "2class.png",
width = 150,
height = 150
),
br(),
HTML("</p><p>&nbsp;</p><p><b>Step 1.3 Test(for prediction) dataset (txt/csv).</b></p>"),
img(
src = "3test.png",
width = 600,
height = 200
),
HTML(
"<p> &nbsp;</p><p> The first line contains the labels Name(<em>HUGO Gene Nomenclature</em>) followed by the identifiers for each sample in the dataset.The dataset is the gene-level transcription estimates, as in log2(x+1) transformed normalized count.&nbsp; </br>* The symbols of test dataset are automatically matched to training dataset symbols .&nbsp;</p><p>&nbsp;</p><p><b>Step 2. Standardization. </b> &nbsp;</p><p> Select the data standardization method. &nbsp;</p><p><b>Step 3. Prediction.</b> &nbsp;</p><p> Press the prediction button. &nbsp;</p><p><b>Step 4. Check out the results.</b> &nbsp;</p><p>After analysis, You can find the results at the result tab. The results of dataset could be downloaded using the download button.</p>"
)
)
)
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
trainingDataset_r <- reactive({
inFile <- input$TrainingGeneExprfile
req(inFile)
f <- fread(inFile$datapath) %>% as.data.frame()
colnames(f)[1] <- "gene"
return(f)
})
trainingClass_r <- reactive({
inFile <- input$ClassOfTraining
req(inFile)
f <- fread(inFile$datapath) %>% as.data.frame()
colnames(f) <- c("sample","class")
return(f)
})
predictDataset_r <- reactive({
inFile <- input$PredictedGeneExprfile
req(inFile)
f <- fread(inFile$datapath) %>% as.data.frame()
colnames(f)[1] <- "gene"
return(f)
})
DoPrediction <- observeEvent(input$doPrediction, {
# duplication removal
trainingDataset <-trainingDataset_r() %>% kasa.duplicationRemovalBySD()
colnames(trainingDataset)[1] <- "gene"
predictDataset <- predictDataset_r() %>% kasa.duplicationRemovalBySD()
colnames(predictDataset)[1] <- "gene"
# sample matching
tmp <- trainingDataset %>% kasa.transposeMatrix()
tmp.1 <- kasa.matchingRow(dataframeX = tmp,dataframeY = trainingClass_r(), keycolX = "sample",keycolY = "sample")
trainingDataset <- tmp.1$dataframeX %>% kasa.transposeMatrix()
colnames(trainingDataset)[1] <- "gene"
trainingClass <- tmp.1$dataframeY
colnames(trainingClass) <- c("sample","class")
## unmatched samples
matchedSamples <- trainingClass$sample %>% as.vector()
unmatchedSamples.t <- tmp$sample[!(tmp$sample %in% matchedSamples)]
unmatchedSamples.c <- trainingClass$sample[!(trainingClass$sample%in% matchedSamples)]
# gene matching
tmp <- kasa.matchingRow(dataframeX = trainingDataset,dataframeY = predictDataset,keycolX = "gene",keycolY = "gene")
trainingDataset <- tmp$dataframeX
predictDataset <- tmp$dataframeY
colnames(trainingDataset)[1] <- "gene"
colnames(predictDataset)[1] <- "gene"
## unmatched gene
matchedgene <- trainingDataset$gene %>% as.vector()
unmatchedGene.t <- trainingDataset_r()$gene[!(trainingDataset_r()$gene %in% matchedgene)]
unmatchedGene.p <- predictDataset_r()$gene[!(predictDataset_r()$gene %in% matchedgene)]
# Standardization by STD_method ---- "none", "STD", "Z_Score", "Robust_Z_score"
switch (
input$standardizationType,
devidedBySD = {
trainingDataset <-
trainingDataset %>% kasa.geneMedianCentering() %>% kasa.geneStandardization()
predictDataset <-
predictDataset %>% kasa.geneMedianCentering() %>% kasa.geneStandardization()
},
Zscore = {
trainingDataset <- trainingDataset %>% kasa.geneZscoring()
predictDataset <- predictDataset %>% kasa.geneZscoring()
},
RobustZ = {
trainingDataset <- trainingDataset %>% kasa.geneRobustZscoring()
predictDataset <- predictDataset %>% kasa.geneRobustZscoring()
}
)
# data preparing for class prediction ----
geneId_x_ <- trainingDataset$gene %>% as.data.frame()
colnames(geneId_x_) <- c("UniqueID")
x_x_ <- trainingDataset[-1]
filter_x_ <- rep(1,nrow(trainingDataset))
expdesign_x_ <- trainingClass
exprTrain_x_ <- x_x_
exprTest_x_ <- predictDataset[-1]
k <- count(expdesign_x_,class)
class_t.l1 <- k$n[1] %>% as.numeric()
class_t.l2 <- k$n[2] %>% as.numeric()
# projectPath <-"OutputBRBarray"
projectPath <- paste0(tempdir(),"/OutputBRBarray")
outputName <- "classPrediction"
generateHTML <- TRUE
prevalence <- c(class_t.l1/(class_t.l1+class_t.l2),class_t.l2/(class_t.l1+class_t.l2))
names(prevalence) <- c(k$class[1], k$class[2])
geneId_m <- geneId_x_[c("UniqueID")]
cls_t <- expdesign_x_$class %>% as.vector()
resList <- classPredict(exprTrain = exprTrain_x_, exprTest = exprTest_x_, isPaired = FALSE,
pairVar.train = NULL, pairVar.test = NULL, geneId_m,
cls = cls_t,
pmethod = c("ccp", "bcc", "dlda", "knn", "nc", "svm"),
geneSelect = "igenes.univAlpha",
univAlpha = 0.001, univMcr = 0, foldDiff = 0, rvm = TRUE, filter = filter_x_,
ngenePairs = 25, nfrvm = 10, cvMethod = 1, kfoldValue = 10, bccPrior = 1,
bccThresh = 0.8, nperm = 0, svmCost = 1, svmWeight =1, fixseed = 1,
prevalence = prevalence, projectPath = projectPath,
outputName = outputName, generateHTML = generateHTML)
if (generateHTML)
browseURL(file.path(projectPath, "Output", outputName,
paste0(outputName, ".html")))
print(projectPath)
output$downloadResults <- downloadHandler(
filename = 'AllReports.zip',
content = function(fname) {
setwd(projectPath)
print(projectPath)
fs <- c("unmatchedSamples_training.txt", "unmatchedSamples_class.txt", "unmatchedGene_training.txt","unmatchedGene_prediction.txt","1_trainingDataset.txt","2_trainingClass.txt","3_predictDataset.txt","4_PredictionResults.txt","5_probability_BCCP.txt")
write.table(unmatchedSamples.t,file = "unmatchedSamples_training.txt",quote=F,row.names = F)
write.table(unmatchedSamples.c,file = "unmatchedSamples_class.txt",quote=F,row.names = F)
write.table(unmatchedGene.t,file = "unmatchedGene_training.txt",quote=F,row.names = F)
write.table(unmatchedGene.p,file = "unmatchedGene_prediction.txt",quote=F,row.names = F)
write_delim(x = trainingDataset,file = "1_trainingDataset.txt",delim = "\t")
write_delim(x = predictDataset,file = "3_predictDataset.txt",delim = "\t")
write_delim(x = trainingClass,file = "2_trainingClass.txt",delim = "\t")
write_delim(x=resList$predNewSamples,file = "4_PredictionResults.txt",delim = "\t")
write_delim(x=resList$probNew,file = "5_probability_BCCP.txt",delim = "\t")
zip(zipfile=fname, files=fs)
if(file.exists(paste0(fname, ".zip"))) {file.rename(paste0(fname, ".zip"), fname)}
},
contentType = "application/zip"
)
output$downloadExample <- downloadHandler(
filename = function() {
"exampleSet.zip"
},
content = function(file) {
file.copy("exampleSet.zip", file)
},
contentType = "application/zip"
)
})
}
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp()
